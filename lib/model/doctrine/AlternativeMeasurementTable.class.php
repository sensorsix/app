<?php

/**
 * AlternativeMeasurementTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AlternativeMeasurementTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return AlternativeMeasurementTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('AlternativeMeasurement');
  }

  /**
   * @param sfGuardUser $user
   * @param $decision_id
   * @return array
   */
  public function getForDashboard(sfGuardUser $user, $decision_id)
  {
    $measurement = $this->createQuery('am')
      ->select('am.id, am.alternative_head_id, am.criterion_id, am.score')
      ->leftJoin('am.Response rs')
      ->leftJoin('rs.Role r')
      ->leftJoin('r.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->andWhere('r.decision_id = ? AND r.dashboard = 1 AND rs.email_address = "dashboard"', $decision_id)
      ->fetchArray();

    $result = array();
    foreach ($measurement as $measure) {
      $result[$measure['alternative_head_id']][$measure['criterion_id']] = $measure['score'];
    }

    return $result;
  }

  /**
   * @param sfGuardUser $user
   * @param int $decision_id
   * @param int $alternative_id
   * @param int $criterion_id
   * @return AlternativeMeasurement|false
   */
  public function getOneForDashboard(sfGuardUser $user, $decision_id, $alternative_id, $criterion_id)
  {
    return $this->createQuery('am')
      ->leftJoin('am.Response rs')
      ->leftJoin('rs.Role r')
      ->leftJoin('r.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->andWhere('r.decision_id = ? AND r.dashboard = 1 AND rs.email_address = "dashboard"', $decision_id)
      ->andWhere('am.alternative_head_id = ? AND am.criterion_id = ?', array($alternative_id, $criterion_id))
      ->fetchOne();
  }

  /**
   * @param $response_id
   * @param $alternative_id
   * @param $criterion_id
   * @return mixed
   */
  public function getOneForSave($response_id, $alternative_id, $criterion_id)
  {
    return $this->createQuery('am')
        ->andWhere('am.alternative_head_id = ? AND am.criterion_id = ? AND am.response_id = ?', array($alternative_id, $criterion_id, $response_id))
        ->fetchOne();
  }
}