<?php

/**
 * Decision
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    dmp
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Decision extends BaseDecision
{
  private $template_changed = false;

  public function preInsert($event)
  {
    if (!$this->user_id) {
      $this->user_id = sfContext::getInstance()->getUser()->getGuardUser()->id;
    }
    if (!$this->assigned_to) {
      $this->assigned_to = sfContext::getInstance()->getUser()->getGuardUser()->id;
    }
  }

  public function preSave($event)
  {
    if (array_key_exists('template_id', $this->getModified()) && !$this->isNew()) {
      $this->template_changed = true;
    }

    if (empty($this->start_date)){
      $this->start_date = null;
    }

    if (empty($this->end_date)){
      $this->end_date = null;
    }

    if (!$this->folder_id) {
      $this->folder_id = Folder::getInstance()->getNotDeletableForUser(sfContext::getInstance()->getUser()->getGuardUser(), Folder::TYPE_PROJECT)->getId();
    }
  }

  public function postSave($event)
  {
    if ($this->template_changed) {
      Doctrine_Query::create()->delete('Criterion')->where('decision_id = ?', $this->id)->execute();
      Doctrine_Query::create()->delete('Role')->where('decision_id = ?', $this->id)->execute();

      foreach ($this->Template->CriteriaTemplate as $criterionTemplate) {
        $criterion = new Criterion();
        $criterion->setDecisionId($this->id);
        $criterion->setName($criterionTemplate->name);
        $criterion->setMeasurement($criterionTemplate->measurement);
        $criterion->setVariableType($criterionTemplate->variable_type);
        $criterion->save();
      }

      foreach ($this->Template->RoleTemplate as $roleTemplate) {
        $role = new Role();
        $role->setDecisionId($this->id);
        $role->setName($roleTemplate->name);
        $role->save();
      }
    }

    $analyzeCollapse           = new AnalyzeCollapse();
    $analyzeCollapse->Decision = $this;
    $analyzeCollapse->save();

    if (!$this->getNode()->isValidNode()) {
      $treeObject = $this->getTable()->getTree();
      $treeObject->createRoot($this);
    }
  }

  /**
   * @param $section
   * @return bool
   */
  public function hasInAnalyze($section)
  {
    $has = false;
    switch ($this->type_id) {
      // Generic
      case 1:
        $has = in_array($section, array('logical_filter', 'role_filter', 'xy', 'bubble', 'cumulative', 'cost', 'partitioner'));
        break;
      // Product development
      case 2:
        $has = in_array($section, array('role_filter', 'xy', 'cumulative', 'cost', 'partitioner', 'bubble'));
        break;
      // Supplier selection
      case 3:
        $has = in_array($section, array('logical_filter', 'xy', 'bubble'));
        break;
      // Portfolio management
      case 4:
        $has = in_array($section, array('logical_filter', 'bubble', 'cumulative', 'cost', 'partitioner'));
        break;
      // Recruitment
      case 5:
        $has = in_array($section, array('logical_filter', 'bubble', 'cost', 'partitioner'));
    }
    return $has;
  }

  public function preDelete($event)
  {
    foreach ($this->Roles as $role) {
      $role->delete();
    }
  }

  public function postInsert($event)
  {
    $wall              = new Wall();
    $wall->decision_id = $this->id;
    $token             = substr(md5(uniqid()), 0, 6);
    while (WallTable::getInstance()->findOneBy('token', $token)) {
      $token = substr(md5(uniqid()), 0, 6);
    }
    $wall->token = $token;
    $wall->save();

    $this->createDashboard();
  }

  /**
   * @return string
   */
  public function getAlternativePluralAlias()
  {
    if ($this->relatedExists('Template')) {
      $text = $this->Template->alternative_plural_alias;
      if ($text == '') {
        $text = 'Items';
      }
    } else if ($this->relatedExists('Type') && $this->type_id == 2) // Product development
    {
      $text = 'Features';
    } else {
      $text = 'Items';
    }

    return $text;
  }

  /**
   * @return string
   */
  public function getAlternativeAlias()
  {
    if ($this->relatedExists('Template')) {
      $text = $this->Template->alternative_alias;
      if ($text == '') {
        $text = 'Item';
      }
    } else {
      $text = 'Item';
    }

    return $text;
  }

  /**
   * @return bool
   */
  public function hasData()
  {
    return $this->Alternative->count() > 0 || $this->Criterion->count() > 0;
  }

  /**
   * @return string
   */
  public function getPartitionerAlias()
  {
    $name = 'Release';
    if ($this->relatedExists('Template')) {
      $name = $this->Template->partitioner_alias;
    } else {
      switch ($this->type_id) {
        // Portfolio management
        case 4:
          $name = 'Portfolio';
          break;
        // Recruitment
        case 5:
          $name = 'Group';
          break;
      }
    }

    return $name;
  }

  /**
   * @return array
   */
  public function getRowData()
  {
    $routing = sfContext::getInstance()->getRouting();
    return array(
      '_element_type'     => 'decision',
      'id'                => $this->id,
      'name'              => $this->name,
      'displayed_name'    => $this->getDisplayedName($routing->generate('dashboard', array('decision_id' => $this->id))),
      'type'              => $this->Type->name,
      'template'          => $this->Template->name,
      'assigned_to'       => $this->AssignedTo->username,
      'description'       => $this->objective,
      'quick_stats'       => $this->getQuickStats(),
      'dashboard_url'     => $routing->generate('dashboard', array('decision_id' => $this->id)),
      'fetch_url'         => $routing->generate('decision\fetch', array('id' => $this->id)),
      'edit_url'          => $routing->generate('decision\edit', array('id' => $this->id)),
      'delete_url'        => $routing->generate('decision\delete'),
      'alternative_count' => count($this->getAlternative()),
      'criterion_count'   => count($this->getCriterion()),
      'survey_count'      => count($this->getRoles()),
      'answer_count'      => count($this->getResponse()),
    );
  }

  /**
   * @param $dashboard_url
   * @return string
   */
  private function getDisplayedName($dashboard_url){
    return '
    <b>
      <i class="glyphicon glyphicon-align-justify help-tip" style="cursor:move" data-toggle="tooltip" data-placement="right" title="Press down to move."></i><a style="margin-left: 5px;" href="' . $dashboard_url . '">' . $this->name . '</a>
    </b>
    <div class="row-tools">
      <small>
        <div style="display:none;" class="element-id" data-id="' . $this->id . '"></div>
        <a href="javascript:void(0)" data-toggle="modal" data-id="' . $this->id . '" data-target="#editRowModal" class="edit_project"><i class="fa fa-pencil-square-o"></i> Edit</a>
        &nbsp; | &nbsp;
        <a id="popper' . $this->id . '"  class="popoverLnk" data-container="body" data-toggle="popover" data-placement="right" title="' . $this->name . '"
           data-content="
                <div>' . $this->objective . '</div>
                <p><ul>
                    <li>Type: ' . $this->Type->name . '</li>
                    <li>Template: ' . $this->Template->name . '</li>
                    <li>Assigned to: ' . $this->AssignedTo->username . '</li>
                </ul></p>
        ">
            <i class="fa fa-info-circle"></i> Quick Info
    </a>
      </small>
    </div>';
  }

  /**
   * @return int|string
   */
  private function getQuickStats()
  {
    $quick_stats =
      count($this->getAlternative()) . ' ' .
      InterfaceLabelTable::getInstance()->get(sfContext::getInstance()->getUser()->getGuardUser(), InterfaceLabelTable::ITEM_TYPE, count($this->getAlternative()) > 1) .
      ' with ' .  count($this->getRoles()) . ' ';

    if (count($this->getRoles()) > 1) {
      $quick_stats .= 'criteria';
    } else {
      $quick_stats .= 'criterion';
    }

    $quick_stats .= ' has ' . count($this->getRoles()) . ' survey';
    if (count($this->getRoles()) > 1) {
      $quick_stats .= 's';
    }

    $quick_stats .= ' with ' . count($this->getResponse()) . ' answer';
    if (count($this->getResponse()) > 1) {
      $quick_stats .= 's';
    }

    return $quick_stats;
  }

  /**
   * @return array
   */
  public function getAPIData()
  {
    return array(
      'id'          => $this->id,
      'name'        => $this->name,
      'type'        => $this->Type->name,
      'template'    => $this->Template->name,
      'assigned_to' => $this->AssignedTo->username,
      'description' => $this->objective
    );
  }

  public function createDashboard()
  {
    $role = new Role();
    $role->setDecisionId($this->id);
    $role->setName('Collect everything');
    $role->setComment('Collect everything is linked to the Overview -page reporting table. <br><br>If you delete this survey your responses on the overview page will be removed.');
    $role->setUpdateable(true);
    $role->setDashboard(true);
    $role->setActive(true);

    $response = new Response();
    $response->setDecisionId($this->id);
    $response->setIpAddress('127.0.0.1');
    $response->setEmailAddress('dashboard');

    $role->Response->add($response);
    $role->Response->save();


    if ($this->Template->name == 'Default') {
      $role_estimates = new Role();
      $role_estimates->setDecisionId($this->id);
      $role_estimates->setName('Collect Estimates');
      $role_estimates->setUpdateable(false);
      $role_estimates->setActive(true);
      $role_estimates->save();

      $role_value = new Role();
      $role_value->setDecisionId($this->id);
      $role_value->setName('Collect input on Value');
      $role_value->setUpdateable(false);
      $role_value->setActive(true);
      $role_value->save();

      $role_usability = new Role();
      $role_usability->setDecisionId($this->id);
      $role_usability->setName('Collect input on Usability');
      $role_usability->setUpdateable(false);
      $role_usability->setActive(true);
      $role_usability->save();

      $role_feasibility = new Role();
      $role_feasibility->setDecisionId($this->id);
      $role_feasibility->setName('Collect input on Feasibility');
      $role_feasibility->setUpdateable(false);
      $role_feasibility->setActive(true);
      $role_feasibility->save();

      // create the default item for project
      $alternative = new Alternative();
      $alternative->setDecisionId($this->id);
      $alternative->setName('Sample item');
      $alternative->setStatus('Reviewed');
      $alternative->save();

      $popularCriteria = PopularCriterionTable::getInstance()->getDashboardDefaultList();
      foreach ($popularCriteria as $popularCriterion) {
        $criterion = new Criterion();
        $criterion->setName($popularCriterion->name);
        $criterion->setMeasurement($popularCriterion->measurement);
        $criterion->setDescription($popularCriterion->description);
        $criterion->setVariableType($popularCriterion->variable_type);
        $criterion->setDecisionId($this->id);
        $criterion->save();

        // set default response as 3 for default item
        if ($popularCriterion->measurement == 'five point scale') {
          $alternative_measurement = new AlternativeMeasurement();
          $alternative_measurement->setAlternativeHeadId($alternative->id);
          $alternative_measurement->setScore(3);
          $alternative_measurement->setResponseId($response->id);
          $alternative_measurement->setRatingMethod($criterion->getMeasurement());
          $alternative_measurement->setCriterionId($criterion->id);
          $alternative_measurement->save();
        }

        // show by default in the Survey (create default matrix of the default roles)
        $array = array(
          'Hour Estimate' => $role_estimates->id,
          'Feasibility'   => $role_feasibility->id,
          'Usability'     => $role_usability->id,
          'Value'         => $role_value->id,
        );
        if (isset($array[$popularCriterion->name])) {
          $planned = new PlannedAlternativeMeasurement();
          $planned->setRoleId($array[$popularCriterion->name]);
          $planned->setAlternativeId($alternative->id);
          $planned->setCriterionId($criterion->id);
          $planned->save();

          $cplanned = new PlannedCriterionPrioritization();
          $cplanned->setCriterionId($criterion->id);
          $cplanned->setRoleId($array[$popularCriterion->name]);
          $cplanned->save();
        }

      }
    } else {
      foreach ($this->Template->CriteriaTemplate as $criterionTemplate) {
        $criterion = new Criterion();
        $criterion->setDecisionId($this->id);
        $criterion->setName($criterionTemplate->name);
        $criterion->setMeasurement($criterionTemplate->measurement);
        $criterion->setVariableType($criterionTemplate->variable_type);
        $criterion->save();
      }

      foreach ($this->Template->RoleTemplate as $roleTemplate) {
        $role = new Role();
        $role->setDecisionId($this->id);
        $role->setName($roleTemplate->name);
        $role->save();
      }
    }
  }

  /**
   * @return bool|Role
   */
  public function getDashboardRole()
  {
    foreach ($this->Roles as $role) {
      if ($role->getDashboard()){
        return $role;
      }
    }

    return false;
  }

  /**
   * @return string
   */
  public function getStatusColor(){
    switch ($this->status){
      case 'Planned':
        return '#cccccc';
      case 'In Progress':
        return '#f2a13a';
      case 'Done':
        return '#67ac04';
      default:
        return '#5bc0de';
    }
  }
}
