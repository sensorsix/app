<?php

/**
 * PlannedAlternativeMeasurement
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PlannedAlternativeMeasurementTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return PlannedAlternativeMeasurementTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('PlannedAlternativeMeasurement');
  }

  /**
   * @param int $role_id
   * @return Doctrine_Collection
   */
  public function getWithCriterionForRole($role_id)
  {
    return Doctrine_Query::create()
      ->from('PlannedAlternativeMeasurement pam')
      ->select('pam.id, pam.criterion_id, c.measurement AS method')
      ->leftJoin('pam.Criterion c')
      ->where('pam.role_id = ?', $role_id)
      ->execute();
  }

  /**
   * @param int $role_id
   * @param int $criterion_id
   * @return bool
   */
  public function hasCriterionForRole($role_id, $criterion_id)
  {
    return Doctrine_Query::create()
      ->from('PlannedAlternativeMeasurement')
      ->select('id')
      ->where('role_id = ? AND criterion_id = ?', array($role_id, $criterion_id))
      ->count() > 0;
  }

  /**
   * @param int $role_id
   * @return int
   */
  public function countForRole($role_id)
  {
    return $this->createQuery('pam')
      ->where('pam.role_id = ?', $role_id)
      ->count();
  }

  public function getListForAPI(sfGuardUser $user, $role_id)
  {
    /** @var PlannedAlternativeMeasurement[] $plannedMeasurements */
    $plannedMeasurements = $this->createQuery('pam')
      ->leftJoin('pam.Role r')
      ->leftJoin('r.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->andWhere('pcp.role_id = ?', $role_id)
      ->execute();

    $result = array();
    foreach ($plannedMeasurements as $plannedMeasurement) {
      $result[] = $plannedMeasurement->getAPIData();
    }

    return $result;
  }

  /**
   * @param sfGuardUser $user
   * @param $id
   * @return PlannedAlternativeMeasurement
   */
  public function getOneForUser(sfGuardUser $user, $id)
  {
    return $this->createQuery('pcp')
      ->leftJoin('pcp.Role r')
      ->leftJoin('r.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->andWhere('pcp.id = ?', $id)
      ->fetchOne();
  }
}