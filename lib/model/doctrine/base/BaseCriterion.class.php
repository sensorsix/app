<?php

/**
 * BaseCriterion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $decision_id
 * @property string $name
 * @property string $description
 * @property enum $measurement
 * @property enum $variable_type
 * @property Decision $Decision
 * @property Doctrine_Collection $GraphDefinition
 * @property Doctrine_Collection $GraphChanges
 * @property Doctrine_Collection $ProjectRelease
 * @property Doctrine_Collection $LogicalFilter
 * @property Doctrine_Collection $Comment
 * @property Doctrine_Collection $HeadPrioritization
 * @property Doctrine_Collection $TailPrioritization
 * @property Doctrine_Collection $AlternativeMeasurement
 * @property Doctrine_Collection $PlannedAlternativeMeasurement
 * @property Doctrine_Collection $PlannedCriterionPrioritization
 * 
 * @method integer             getDecisionId()                     Returns the current record's "decision_id" value
 * @method string              getName()                           Returns the current record's "name" value
 * @method string              getDescription()                    Returns the current record's "description" value
 * @method enum                getMeasurement()                    Returns the current record's "measurement" value
 * @method enum                getVariableType()                   Returns the current record's "variable_type" value
 * @method Decision            getDecision()                       Returns the current record's "Decision" value
 * @method Doctrine_Collection getGraphDefinition()                Returns the current record's "GraphDefinition" collection
 * @method Doctrine_Collection getGraphChanges()                   Returns the current record's "GraphChanges" collection
 * @method Doctrine_Collection getProjectRelease()                 Returns the current record's "ProjectRelease" collection
 * @method Doctrine_Collection getLogicalFilter()                  Returns the current record's "LogicalFilter" collection
 * @method Doctrine_Collection getComment()                        Returns the current record's "Comment" collection
 * @method Doctrine_Collection getHeadPrioritization()             Returns the current record's "HeadPrioritization" collection
 * @method Doctrine_Collection getTailPrioritization()             Returns the current record's "TailPrioritization" collection
 * @method Doctrine_Collection getAlternativeMeasurement()         Returns the current record's "AlternativeMeasurement" collection
 * @method Doctrine_Collection getPlannedAlternativeMeasurement()  Returns the current record's "PlannedAlternativeMeasurement" collection
 * @method Doctrine_Collection getPlannedCriterionPrioritization() Returns the current record's "PlannedCriterionPrioritization" collection
 * @method Criterion           setDecisionId()                     Sets the current record's "decision_id" value
 * @method Criterion           setName()                           Sets the current record's "name" value
 * @method Criterion           setDescription()                    Sets the current record's "description" value
 * @method Criterion           setMeasurement()                    Sets the current record's "measurement" value
 * @method Criterion           setVariableType()                   Sets the current record's "variable_type" value
 * @method Criterion           setDecision()                       Sets the current record's "Decision" value
 * @method Criterion           setGraphDefinition()                Sets the current record's "GraphDefinition" collection
 * @method Criterion           setGraphChanges()                   Sets the current record's "GraphChanges" collection
 * @method Criterion           setProjectRelease()                 Sets the current record's "ProjectRelease" collection
 * @method Criterion           setLogicalFilter()                  Sets the current record's "LogicalFilter" collection
 * @method Criterion           setComment()                        Sets the current record's "Comment" collection
 * @method Criterion           setHeadPrioritization()             Sets the current record's "HeadPrioritization" collection
 * @method Criterion           setTailPrioritization()             Sets the current record's "TailPrioritization" collection
 * @method Criterion           setAlternativeMeasurement()         Sets the current record's "AlternativeMeasurement" collection
 * @method Criterion           setPlannedAlternativeMeasurement()  Sets the current record's "PlannedAlternativeMeasurement" collection
 * @method Criterion           setPlannedCriterionPrioritization() Sets the current record's "PlannedCriterionPrioritization" collection
 * 
 * @package    dmp
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCriterion extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('criterion');
        $this->hasColumn('decision_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('measurement', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'direct rating',
              1 => 'direct float',
              2 => 'forced ranking',
              3 => 'five point scale',
              4 => 'ten point scale',
              5 => 'comment',
             ),
             'default' => 'five point scale',
             ));
        $this->hasColumn('variable_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Benefit',
              1 => 'Cost',
              2 => 'Info',
             ),
             'default' => 'Benefit',
             ));

        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Decision', array(
             'local' => 'decision_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('GraphDefinition', array(
             'local' => 'id',
             'foreign' => 'criterion_id'));

        $this->hasMany('GraphChanges', array(
             'local' => 'id',
             'foreign' => 'criterion_id'));

        $this->hasMany('ProjectRelease', array(
             'local' => 'id',
             'foreign' => 'criterion_id'));

        $this->hasMany('LogicalFilter', array(
             'local' => 'id',
             'foreign' => 'criterion_id'));

        $this->hasMany('Comment', array(
             'local' => 'id',
             'foreign' => 'criterion_id'));

        $this->hasMany('CriterionPrioritization as HeadPrioritization', array(
             'local' => 'id',
             'foreign' => 'criterion_head_id'));

        $this->hasMany('CriterionPrioritization as TailPrioritization', array(
             'local' => 'id',
             'foreign' => 'criterion_tail_id'));

        $this->hasMany('AlternativeMeasurement', array(
             'local' => 'id',
             'foreign' => 'criterion_id'));

        $this->hasMany('PlannedAlternativeMeasurement', array(
             'local' => 'id',
             'foreign' => 'criterion_id'));

        $this->hasMany('PlannedCriterionPrioritization', array(
             'local' => 'id',
             'foreign' => 'criterion_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'created_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
             ),
             'updated' => 
             array(
              'name' => 'updated_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
             ),
             ));
        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $this->actAs($timestampable0);
        $this->actAs($nestedset0);
    }
}