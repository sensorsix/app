<?php

/**
 * BaseDecision
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property string $name
 * @property string $objective
 * @property integer $type_id
 * @property integer $template_id
 * @property integer $folder_id
 * @property integer $assigned_to
 * @property datetime $start_date
 * @property datetime $end_date
 * @property string $color
 * @property enum $status
 * @property string $external_id
 * @property boolean $save_graph_weight
 * @property sfGuardUser $User
 * @property DecisionType $Type
 * @property TypeTemplate $Template
 * @property Folder $Folder
 * @property sfGuardUser $AssignedTo
 * @property Doctrine_Collection $Alternative
 * @property Doctrine_Collection $Graph
 * @property Doctrine_Collection $ProjectRelease
 * @property Doctrine_Collection $LogicalFilter
 * @property Doctrine_Collection $RoleFilter
 * @property Doctrine_Collection $StatusFilter
 * @property Doctrine_Collection $TagFilter
 * @property AnalyzeCollapse $AnalyzeCollapse
 * @property Doctrine_Collection $Comment
 * @property Doctrine_Collection $Criterion
 * @property Doctrine_Collection $Response
 * @property Doctrine_Collection $RoadmapDecision
 * @property Doctrine_Collection $Roles
 * @property Doctrine_Collection $TagDecision
 * @property Doctrine_Collection $Wall
 * 
 * @method integer             getUserId()            Returns the current record's "user_id" value
 * @method string              getName()              Returns the current record's "name" value
 * @method string              getObjective()         Returns the current record's "objective" value
 * @method integer             getTypeId()            Returns the current record's "type_id" value
 * @method integer             getTemplateId()        Returns the current record's "template_id" value
 * @method integer             getFolderId()          Returns the current record's "folder_id" value
 * @method integer             getAssignedTo()        Returns the current record's "assigned_to" value
 * @method datetime            getStartDate()         Returns the current record's "start_date" value
 * @method datetime            getEndDate()           Returns the current record's "end_date" value
 * @method string              getColor()             Returns the current record's "color" value
 * @method enum                getStatus()            Returns the current record's "status" value
 * @method string              getExternalId()        Returns the current record's "external_id" value
 * @method boolean             getSaveGraphWeight()   Returns the current record's "save_graph_weight" value
 * @method sfGuardUser         getUser()              Returns the current record's "User" value
 * @method DecisionType        getType()              Returns the current record's "Type" value
 * @method TypeTemplate        getTemplate()          Returns the current record's "Template" value
 * @method Folder              getFolder()            Returns the current record's "Folder" value
 * @method sfGuardUser         getAssignedTo()        Returns the current record's "AssignedTo" value
 * @method Doctrine_Collection getAlternative()       Returns the current record's "Alternative" collection
 * @method Doctrine_Collection getGraph()             Returns the current record's "Graph" collection
 * @method Doctrine_Collection getProjectRelease()    Returns the current record's "ProjectRelease" collection
 * @method Doctrine_Collection getLogicalFilter()     Returns the current record's "LogicalFilter" collection
 * @method Doctrine_Collection getRoleFilter()        Returns the current record's "RoleFilter" collection
 * @method Doctrine_Collection getStatusFilter()      Returns the current record's "StatusFilter" collection
 * @method Doctrine_Collection getTagFilter()         Returns the current record's "TagFilter" collection
 * @method AnalyzeCollapse     getAnalyzeCollapse()   Returns the current record's "AnalyzeCollapse" value
 * @method Doctrine_Collection getComment()           Returns the current record's "Comment" collection
 * @method Doctrine_Collection getCriterion()         Returns the current record's "Criterion" collection
 * @method Doctrine_Collection getResponse()          Returns the current record's "Response" collection
 * @method Doctrine_Collection getRoadmapDecision()   Returns the current record's "RoadmapDecision" collection
 * @method Doctrine_Collection getRoles()             Returns the current record's "Roles" collection
 * @method Doctrine_Collection getTagDecision()       Returns the current record's "TagDecision" collection
 * @method Doctrine_Collection getWall()              Returns the current record's "Wall" collection
 * @method Decision            setUserId()            Sets the current record's "user_id" value
 * @method Decision            setName()              Sets the current record's "name" value
 * @method Decision            setObjective()         Sets the current record's "objective" value
 * @method Decision            setTypeId()            Sets the current record's "type_id" value
 * @method Decision            setTemplateId()        Sets the current record's "template_id" value
 * @method Decision            setFolderId()          Sets the current record's "folder_id" value
 * @method Decision            setAssignedTo()        Sets the current record's "assigned_to" value
 * @method Decision            setStartDate()         Sets the current record's "start_date" value
 * @method Decision            setEndDate()           Sets the current record's "end_date" value
 * @method Decision            setColor()             Sets the current record's "color" value
 * @method Decision            setStatus()            Sets the current record's "status" value
 * @method Decision            setExternalId()        Sets the current record's "external_id" value
 * @method Decision            setSaveGraphWeight()   Sets the current record's "save_graph_weight" value
 * @method Decision            setUser()              Sets the current record's "User" value
 * @method Decision            setType()              Sets the current record's "Type" value
 * @method Decision            setTemplate()          Sets the current record's "Template" value
 * @method Decision            setFolder()            Sets the current record's "Folder" value
 * @method Decision            setAssignedTo()        Sets the current record's "AssignedTo" value
 * @method Decision            setAlternative()       Sets the current record's "Alternative" collection
 * @method Decision            setGraph()             Sets the current record's "Graph" collection
 * @method Decision            setProjectRelease()    Sets the current record's "ProjectRelease" collection
 * @method Decision            setLogicalFilter()     Sets the current record's "LogicalFilter" collection
 * @method Decision            setRoleFilter()        Sets the current record's "RoleFilter" collection
 * @method Decision            setStatusFilter()      Sets the current record's "StatusFilter" collection
 * @method Decision            setTagFilter()         Sets the current record's "TagFilter" collection
 * @method Decision            setAnalyzeCollapse()   Sets the current record's "AnalyzeCollapse" value
 * @method Decision            setComment()           Sets the current record's "Comment" collection
 * @method Decision            setCriterion()         Sets the current record's "Criterion" collection
 * @method Decision            setResponse()          Sets the current record's "Response" collection
 * @method Decision            setRoadmapDecision()   Sets the current record's "RoadmapDecision" collection
 * @method Decision            setRoles()             Sets the current record's "Roles" collection
 * @method Decision            setTagDecision()       Sets the current record's "TagDecision" collection
 * @method Decision            setWall()              Sets the current record's "Wall" collection
 * 
 * @package    dmp
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDecision extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('decision');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('objective', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('type_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('template_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('folder_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('assigned_to', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('start_date', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('end_date', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('color', 'string', 8, array(
             'type' => 'string',
             'length' => 8,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Planned',
              1 => 'In Progress',
              2 => 'Done',
             ),
             'default' => 'Planned',
             ));
        $this->hasColumn('external_id', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('save_graph_weight', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));

        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('DecisionType as Type', array(
             'local' => 'type_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('TypeTemplate as Template', array(
             'local' => 'template_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Folder', array(
             'local' => 'folder_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as AssignedTo', array(
             'local' => 'assigned_to',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Alternative', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('Graph', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('ProjectRelease', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('LogicalFilter', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('RoleFilter', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('StatusFilter', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('TagFilter', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasOne('AnalyzeCollapse', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('Comment', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('Criterion', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('Response', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('RoadmapDecision', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('Role as Roles', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('TagDecision', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $this->hasMany('Wall', array(
             'local' => 'id',
             'foreign' => 'decision_id'));

        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'created_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
             ),
             'updated' => 
             array(
              'name' => 'updated_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
             ),
             ));
        $this->actAs($nestedset0);
        $this->actAs($timestampable0);
    }
}