<?php

/**
 * BaseTypeTemplate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $type_id
 * @property string $alternative_alias
 * @property string $alternative_plural_alias
 * @property string $partitioner_alias
 * @property integer $user_id
 * @property DecisionType $Type
 * @property sfGuardUser $User
 * @property Doctrine_Collection $RoleTemplate
 * @property Doctrine_Collection $CriteriaTemplate
 * @property Doctrine_Collection $Decision
 * 
 * @method string              getName()                     Returns the current record's "name" value
 * @method integer             getTypeId()                   Returns the current record's "type_id" value
 * @method string              getAlternativeAlias()         Returns the current record's "alternative_alias" value
 * @method string              getAlternativePluralAlias()   Returns the current record's "alternative_plural_alias" value
 * @method string              getPartitionerAlias()         Returns the current record's "partitioner_alias" value
 * @method integer             getUserId()                   Returns the current record's "user_id" value
 * @method DecisionType        getType()                     Returns the current record's "Type" value
 * @method sfGuardUser         getUser()                     Returns the current record's "User" value
 * @method Doctrine_Collection getRoleTemplate()             Returns the current record's "RoleTemplate" collection
 * @method Doctrine_Collection getCriteriaTemplate()         Returns the current record's "CriteriaTemplate" collection
 * @method Doctrine_Collection getDecision()                 Returns the current record's "Decision" collection
 * @method TypeTemplate        setName()                     Sets the current record's "name" value
 * @method TypeTemplate        setTypeId()                   Sets the current record's "type_id" value
 * @method TypeTemplate        setAlternativeAlias()         Sets the current record's "alternative_alias" value
 * @method TypeTemplate        setAlternativePluralAlias()   Sets the current record's "alternative_plural_alias" value
 * @method TypeTemplate        setPartitionerAlias()         Sets the current record's "partitioner_alias" value
 * @method TypeTemplate        setUserId()                   Sets the current record's "user_id" value
 * @method TypeTemplate        setType()                     Sets the current record's "Type" value
 * @method TypeTemplate        setUser()                     Sets the current record's "User" value
 * @method TypeTemplate        setRoleTemplate()             Sets the current record's "RoleTemplate" collection
 * @method TypeTemplate        setCriteriaTemplate()         Sets the current record's "CriteriaTemplate" collection
 * @method TypeTemplate        setDecision()                 Sets the current record's "Decision" collection
 * 
 * @package    dmp
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTypeTemplate extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('type_template');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('type_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('alternative_alias', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('alternative_plural_alias', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('partitioner_alias', 'string', 64, array(
             'type' => 'string',
             'length' => 64,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('DecisionType as Type', array(
             'local' => 'type_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('RoleTemplate', array(
             'local' => 'id',
             'foreign' => 'template_id'));

        $this->hasMany('CriteriaTemplate', array(
             'local' => 'id',
             'foreign' => 'template_id'));

        $this->hasMany('Decision', array(
             'local' => 'id',
             'foreign' => 'template_id'));
    }
}