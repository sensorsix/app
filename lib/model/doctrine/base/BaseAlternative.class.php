<?php

/**
 * BaseAlternative
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $decision_id
 * @property string $name
 * @property string $additional_info
 * @property integer $score
 * @property enum $status
 * @property string $created_by
 * @property string $updated_by
 * @property string $external_id
 * @property integer $assigned_to
 * @property string $notes
 * @property tinyint $work_progress
 * @property datetime $due_date
 * @property datetime $notify_date
 * @property bigint $type_id
 * @property string $item_id
 * @property text $custom_fields
 * @property Doctrine_Collection $Files
 * @property Decision $Decision
 * @property sfGuardUser $Assigned
 * @property AlternativeType $AlternativeType
 * @property Doctrine_Collection $AlternativeLink
 * @property Doctrine_Collection $AlternativeUploadedFile
 * @property Doctrine_Collection $AlternativeRelation
 * @property Doctrine_Collection $GraphDefinition
 * @property Doctrine_Collection $ProjectReleaseAlternative
 * @property Doctrine_Collection $Comment
 * @property Doctrine_Collection $Measurement
 * @property Doctrine_Collection $PlannedMeasurements
 * @property Doctrine_Collection $TagAlternative
 * 
 * @method integer             getDecisionId()                Returns the current record's "decision_id" value
 * @method string              getName()                      Returns the current record's "name" value
 * @method string              getAdditionalInfo()            Returns the current record's "additional_info" value
 * @method integer             getScore()                     Returns the current record's "score" value
 * @method enum                getStatus()                    Returns the current record's "status" value
 * @method string              getCreatedBy()                 Returns the current record's "created_by" value
 * @method string              getUpdatedBy()                 Returns the current record's "updated_by" value
 * @method string              getExternalId()                Returns the current record's "external_id" value
 * @method integer             getAssignedTo()                Returns the current record's "assigned_to" value
 * @method string              getNotes()                     Returns the current record's "notes" value
 * @method tinyint             getWorkProgress()              Returns the current record's "work_progress" value
 * @method datetime            getDueDate()                   Returns the current record's "due_date" value
 * @method datetime            getNotifyDate()                Returns the current record's "notify_date" value
 * @method bigint              getTypeId()                    Returns the current record's "type_id" value
 * @method string              getItemId()                    Returns the current record's "item_id" value
 * @method text                getCustomFields()              Returns the current record's "custom_fields" value
 * @method Doctrine_Collection getFiles()                     Returns the current record's "Files" collection
 * @method Decision            getDecision()                  Returns the current record's "Decision" value
 * @method sfGuardUser         getAssigned()                  Returns the current record's "Assigned" value
 * @method AlternativeType     getAlternativeType()           Returns the current record's "AlternativeType" value
 * @method Doctrine_Collection getAlternativeLink()           Returns the current record's "AlternativeLink" collection
 * @method Doctrine_Collection getAlternativeUploadedFile()   Returns the current record's "AlternativeUploadedFile" collection
 * @method Doctrine_Collection getAlternativeRelation()       Returns the current record's "AlternativeRelation" collection
 * @method Doctrine_Collection getGraphDefinition()           Returns the current record's "GraphDefinition" collection
 * @method Doctrine_Collection getProjectReleaseAlternative() Returns the current record's "ProjectReleaseAlternative" collection
 * @method Doctrine_Collection getComment()                   Returns the current record's "Comment" collection
 * @method Doctrine_Collection getMeasurement()               Returns the current record's "Measurement" collection
 * @method Doctrine_Collection getPlannedMeasurements()       Returns the current record's "PlannedMeasurements" collection
 * @method Doctrine_Collection getTagAlternative()            Returns the current record's "TagAlternative" collection
 * @method Alternative         setDecisionId()                Sets the current record's "decision_id" value
 * @method Alternative         setName()                      Sets the current record's "name" value
 * @method Alternative         setAdditionalInfo()            Sets the current record's "additional_info" value
 * @method Alternative         setScore()                     Sets the current record's "score" value
 * @method Alternative         setStatus()                    Sets the current record's "status" value
 * @method Alternative         setCreatedBy()                 Sets the current record's "created_by" value
 * @method Alternative         setUpdatedBy()                 Sets the current record's "updated_by" value
 * @method Alternative         setExternalId()                Sets the current record's "external_id" value
 * @method Alternative         setAssignedTo()                Sets the current record's "assigned_to" value
 * @method Alternative         setNotes()                     Sets the current record's "notes" value
 * @method Alternative         setWorkProgress()              Sets the current record's "work_progress" value
 * @method Alternative         setDueDate()                   Sets the current record's "due_date" value
 * @method Alternative         setNotifyDate()                Sets the current record's "notify_date" value
 * @method Alternative         setTypeId()                    Sets the current record's "type_id" value
 * @method Alternative         setItemId()                    Sets the current record's "item_id" value
 * @method Alternative         setCustomFields()              Sets the current record's "custom_fields" value
 * @method Alternative         setFiles()                     Sets the current record's "Files" collection
 * @method Alternative         setDecision()                  Sets the current record's "Decision" value
 * @method Alternative         setAssigned()                  Sets the current record's "Assigned" value
 * @method Alternative         setAlternativeType()           Sets the current record's "AlternativeType" value
 * @method Alternative         setAlternativeLink()           Sets the current record's "AlternativeLink" collection
 * @method Alternative         setAlternativeUploadedFile()   Sets the current record's "AlternativeUploadedFile" collection
 * @method Alternative         setAlternativeRelation()       Sets the current record's "AlternativeRelation" collection
 * @method Alternative         setGraphDefinition()           Sets the current record's "GraphDefinition" collection
 * @method Alternative         setProjectReleaseAlternative() Sets the current record's "ProjectReleaseAlternative" collection
 * @method Alternative         setComment()                   Sets the current record's "Comment" collection
 * @method Alternative         setMeasurement()               Sets the current record's "Measurement" collection
 * @method Alternative         setPlannedMeasurements()       Sets the current record's "PlannedMeasurements" collection
 * @method Alternative         setTagAlternative()            Sets the current record's "TagAlternative" collection
 * 
 * @package    dmp
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAlternative extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('alternative');
        $this->hasColumn('decision_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('additional_info', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('score', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Draft',
              1 => 'Reviewed',
              2 => 'Planned',
              3 => 'Doing',
              4 => 'Finished',
              5 => 'Parked',
             ),
             'default' => 'Draft',
             ));
        $this->hasColumn('created_by', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('updated_by', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('external_id', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('assigned_to', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('notes', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('work_progress', 'tinyint', null, array(
             'type' => 'tinyint',
             'default' => 0,
             ));
        $this->hasColumn('due_date', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('notify_date', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('type_id', 'bigint', null, array(
             'type' => 'bigint',
             ));
        $this->hasColumn('item_id', 'string', 8, array(
             'type' => 'string',
             'length' => 8,
             ));
        $this->hasColumn('custom_fields', 'text', null, array(
             'type' => 'text',
             ));

        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('UploadedFile as Files', array(
             'refClass' => 'AlternativeUploadedFile',
             'local' => 'alternative_id',
             'foreign' => 'uploaded_file_id'));

        $this->hasOne('Decision', array(
             'local' => 'decision_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as Assigned', array(
             'local' => 'assigned_to',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('AlternativeType', array(
             'local' => 'type_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('AlternativeLink', array(
             'local' => 'id',
             'foreign' => 'alternative_id'));

        $this->hasMany('AlternativeUploadedFile', array(
             'local' => 'id',
             'foreign' => 'alternative_id'));

        $this->hasMany('AlternativeRelation', array(
             'local' => 'id',
             'foreign' => 'from_id'));

        $this->hasMany('GraphDefinition', array(
             'local' => 'id',
             'foreign' => 'alternative_id'));

        $this->hasMany('ProjectReleaseAlternative', array(
             'local' => 'id',
             'foreign' => 'alternative_id'));

        $this->hasMany('Comment', array(
             'local' => 'id',
             'foreign' => 'alternative_id'));

        $this->hasMany('AlternativeMeasurement as Measurement', array(
             'local' => 'id',
             'foreign' => 'alternative_head_id'));

        $this->hasMany('PlannedAlternativeMeasurement as PlannedMeasurements', array(
             'local' => 'id',
             'foreign' => 'alternative_id'));

        $this->hasMany('TagAlternative', array(
             'local' => 'id',
             'foreign' => 'alternative_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'created_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
             ),
             'updated' => 
             array(
              'name' => 'updated_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
             ),
             ));
        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $this->actAs($timestampable0);
        $this->actAs($nestedset0);
    }
}