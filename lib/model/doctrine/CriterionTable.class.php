<?php

/**
 * CriterionTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CriterionTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return CriterionTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Criterion');
  }

  /**
   * @return Doctrine_Query
   */
  private function getTreeQuery()
  {
    return Doctrine_Query::create()->from('Criterion parent')
      ->addFrom('Criterion node')
      ->select('parent.id, parent.name, parent.level, parent.decision_id')
      ->andWhere('node.root_id = parent.root_id')
      ->andWhere('node.lft BETWEEN parent.lft AND parent.rgt')
      ->addOrderBy('parent.root_id DESC, parent.lft ASC')
      ->groupBy('parent.id');
  }


  /**
   * @param int $decision_id
   * @return Doctrine_Collection
   */
  public function getList($decision_id)
  {
    return $this->getTreeQuery()
      ->andWhere('parent.decision_id = ?', $decision_id)
      ->execute();
  }

  /**
   * @param array $criterion_ids
   * @return Doctrine_Collection
   */
  public function getPlanned($criterion_ids)
  {
    return $this->getTreeQuery()
      ->andWhereIn('parent.id', array_merge(array(0), $criterion_ids))
      ->execute();
  }

  public function getPlannedForPrioritization($role_id)
  {
    return Doctrine_Query::create()
      ->select('pap.id, c.name, c.description')
      ->from('Criterion c')
      ->leftJoin('c.PlannedCriterionPrioritization pap')
      ->where('pap.role_id = ?', $role_id)
      ->execute();
  }

  /**
   * @param sfGuardUser $user
   * @param $decision_id
   * @return Doctrine_Collection|Criterion[]
   */
  public function getListForUser(sfGuardUser $user, $decision_id)
  {
    return $this->createQuery('c')
      ->leftJoin('c.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->where('c.decision_id = ? AND c.measurement != "forced ranking"', $decision_id)
      ->execute();
  }

  /**
   * @param sfGuardUser $user
   * @param $decision_id
   * @return array
   */
  public function getArrayForUser(sfGuardUser $user, $decision_id)
  {
    return $this->createQuery('c')
      ->select('c.id, c.name, c.measurement')
      ->leftJoin('c.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->where('c.decision_id = ? AND c.measurement != "forced ranking"', $decision_id)
      ->fetchArray();
  }

  public function getForUserJSON(sfGuardUser $user, $decision_id)
  {
    $criteria = $this->createQuery('c')
      ->leftJoin('c.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->where('c.decision_id = ?', $decision_id)
      ->execute();

    $result = array();
    foreach ($criteria as $criterion) {
      $result[] = $criterion->getRowData();
    }

    return json_encode($result);
  }

  public function getListForAPI(sfGuardUser $user, $decision_id)
  {
    /** @var Criterion[] $criteria */
    $criteria = $this->createQuery('c')
      ->leftJoin('c.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->where('c.decision_id = ?', $decision_id)
      ->execute();

    $result = array();
    foreach ($criteria as $criterion) {
      $result[] = $criterion->getAPIData();
    }

    return $result;
  }

  /**
   * @param sfGuardUser $user
   * @param $id
   * @return Criterion
   */
  public function getOneForUser(sfGuardUser $user, $id)
  {
    return $this->createQuery('c')
      ->leftJoin('c.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->andWhere('c.id = ?', $id)
      ->fetchOne();
  }
}