<?php

/**
 * FolderTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class FolderTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return FolderTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Folder');
  }

  /**
   * @param $id
   * @param sfGuardUser $user
   * @param $type
   * @return mixed
   */
  public function getForUser($id, sfGuardUser $user, $type = null)
  {
    $result = $this->createQuery('f')
      ->where('f.id = ?', $id)
      ->andWhereIn('f.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user));

    if ($type) {
      $result->andWhereIn('f.type', $type);
    }

    return $result->fetchOne();
  }

  /**
   * @param sfGuardUser $user
   * @param $type
   * @param $create_if_not_exists
   * @return mixed
   */
  public function getNotDeletableForUser(sfGuardUser $user, $type, $create_if_not_exists = true)
  {
    $folder = $this->createQuery('f')
      ->whereIn('f.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->andWhere('f.deletable = ?', 0)
      ->andWhere('f.type = ?', $type)
      ->fetchOne();

    if (!$folder && $create_if_not_exists) {
      $folder = new Folder();
      $folder->setName('Default');
      $folder->setUserId($user->getId());
      $folder->setDeletable(0);
      $folder->setType($type);
      $folder->save();
    }

    return $folder;
  }

  /**
   * @param sfGuardUser $user
   * @param string $type
   * @return mixed|string|void
   */
  public function getForUserJSON(sfGuardUser $user, $type = 'project')
  {
    /** @var Folder[] $folders */
    $query = $this->createQuery('f');

    if ($type == 'project') {
      $query->leftJoin('f.Decisions d');
    } else {
      $query->leftJoin('f.Roadmaps r');
    }

    $query->leftJoin('f.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('f.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->andWhere('f.type = ?', $type);

    $folders = $query->execute();

    $result = array();
    foreach ($folders as $folder) {
      $result[] = $folder->getRowData($type);
    }

    return json_encode($result);
  }
}