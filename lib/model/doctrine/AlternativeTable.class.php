<?php

/**
 * AlternativeTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AlternativeTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return AlternativeTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Alternative');
  }

  /**
   * @return Doctrine_Query
   */
  private function getTreeQuery()
  {
    return Doctrine_Query::create()->from('Alternative parent')
      ->addFrom('Alternative node')
      ->select('parent.id, parent.name, parent.level, parent.decision_id')
      ->andWhere('node.root_id = parent.root_id')
      ->andWhere('node.lft BETWEEN parent.lft AND parent.rgt')
      ->addOrderBy('parent.root_id DESC, parent.lft ASC')
      ->groupBy('parent.id');
  }

  /**
   * @param int $decision_id
   * @return Doctrine_Collection
   */
  public function getList($decision_id)
  {
    return $this->getTreeQuery()
      ->select('parent.id, parent.name, parent.level, parent.decision_id')
      ->andWhere('parent.decision_id = ?', $decision_id)
      ->execute();
  }

  public function getPlanned($alternative_ids)
  {
    return $this->getTreeQuery()
      ->andWhereIn('parent.id', array_merge(array(0), $alternative_ids))
      ->execute();
  }

  /**
   * @param int $decision_id
   * @return Doctrine_Collection
   */
  public function getReviewedList($decision_id)
  {
    return Doctrine_Query::create()
      ->from('Alternative a')
      ->where('a.status = "Reviewed" AND a.decision_id = ?', array($decision_id))
      ->orderBy('a.id DESC')
      ->execute();
  }

  public function getPlannedForMeasurement($role_id, $criterion_id)
  {
    return Doctrine_Query::create()
      ->select('pam.id, a.name, a.additional_info')
      ->from('Alternative a')
      ->leftJoin('a.AlternativeUploadedFile auf')
      ->leftJoin('auf.UploadedFile uf')
      ->leftJoin('a.PlannedMeasurements pam')
      ->where('pam.role_id = ? AND pam.criterion_id = ?', array($role_id, $criterion_id))
      ->execute();
  }

  public function countForDecision($decision_id)
  {
    return $this->createQuery('a')
      ->where('a.decision_id = ?', $decision_id)
      ->count();
  }

  /**
   * @param $id
   * @return Alternative|boolean
   */
  public function getForVote($id)
  {
    return $this->createQuery('a')
      ->where('a.status = "Reviewed" AND a.id = ?', $id)
      ->fetchOne();
  }

  /**
   * @param sfGuardUser $user
   * @param $decision_id
   * @return Doctrine_Collection|Alternative[]
   */
  public function getListForUser(sfGuardUser $user, $decision_id = 0)
  {
    $result = $this->createQuery('a')
      ->leftJoin('a.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user));

    if ($decision_id){
      $result->andWhere('a.decision_id = ?', $decision_id);
    }

    return $result->execute();
  }

  /**
   * @param sfGuardUser $user
   * @param int $decision_id
   * @return array
   */
  public function getArrayForUser(sfGuardUser $user, $decision_id = 0)
  {
    $result = $this->createQuery('a')
      ->select('a.id, a.name')
      ->leftJoin('a.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user));

    if ($decision_id){
      $result->andWhere('a.decision_id = ?', $decision_id);
    }

    return $result->fetchArray();
  }

  public function getForUserJSON(sfGuardUser $user, $decision_id)
  {
    $alternatives = $this->createQuery('a')
      ->leftJoin('a.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->leftJoin('a.TagAlternative ta')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->andWhere('a.decision_id = ?', $decision_id)
      ->execute();

    $result = array();
    foreach ($alternatives as $alternative) {
      $tags = array();
      foreach ($alternative->getTagAlternative() as $tag){
        $tags[] = $tag->Tag->name;
      }

      $row = $alternative->getRowData();
      $row['tags'] = implode(', ', $tags);

      $result[] = $row;
    }

    return json_encode($result);
  }

  public function getListForAPI(sfGuardUser $user, $decision_id)
  {
    $alternatives = $this->getListForUser($user, $decision_id);

    $result = array();
    foreach ($alternatives as $alternative) {
      $result[] = $alternative->getAPIData();
    }

    return $result;
  }

  public function getDashboardReleaseJSON($decision_id, $sorted_ids)
  {
    /** @var Alternative[] $alternatives */
    $alternatives = $this->createQuery('a')
      ->select('a.id, a.name')
      ->where('a.decision_id = ?', $decision_id)
      ->fetchArray();

    $result = array();
    foreach ($alternatives as $alternative) {
      $result[$alternative['id']] = array(
        'alternative_id' => $alternative['id'],
        'name' => $alternative['name']
      );
    }

    return json_encode(array_values(Utility::sortArrayByArray(
      $result,
      array_reverse($sorted_ids)
    )));
  }

  /**
   * @param sfGuardUser $user
   * @param $id
   * @return Alternative
   */
  public function getOneForUser(sfGuardUser $user, $id)
  {
    return $this->createQuery('a')
      ->leftJoin('a.Decision d')
      ->leftJoin('d.User u')
      ->leftJoin('u.TeamMember tm')
      ->whereIn('d.user_id', sfGuardUserTable::getInstance()->getUsersInTeamIDs($user))
      ->andWhere('a.id = ?', $id)
      ->fetchOne();
  }

  /**
   * @param sfGuardUser $user
   * @param $decision_id
   * @return array
   */
  public function getTagsForProject(sfGuardUser $user, $decision_id){
    $tags = array();
    $collection = $this->getListForUser($user, $decision_id);
    foreach ($collection as $el){
      foreach ($el->getTagAlternative() as $tag){
        $tags[] = $tag->getTag()->getName();
      }
    }

    return array_unique($tags);
  }
}